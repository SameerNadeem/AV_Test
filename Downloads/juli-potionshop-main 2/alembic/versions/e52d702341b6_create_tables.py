"""create tables

Revision ID: e52d702341b6
Revises: d124929ba441
Create Date: 2025-05-04 10:38:35.808766

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "e52d702341b6"
down_revision: Union[str, None] = "d124929ba441"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""

    # Drop child tables first
    op.drop_table("cart_items")
    op.drop_table("account_ledger_entries")
    op.drop_table("audit_log")
    op.drop_table("ledger_entries")
    op.drop_table("account_transactions")

    # Now drop parent tables
    op.drop_table("carts")
    op.drop_table("accounts")
    op.drop_table("processed_requests")
    op.drop_table("potions")
    op.drop_table("potion_catalog")
    op.drop_table("global_inventory")


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "global_inventory",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("gold", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            "red_ml",
            sa.INTEGER(),
            server_default=sa.text("0"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "green_ml",
            sa.INTEGER(),
            server_default=sa.text("0"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "blue_ml",
            sa.INTEGER(),
            server_default=sa.text("0"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "dark_ml",
            sa.INTEGER(),
            server_default=sa.text("0"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "red_potions",
            sa.INTEGER(),
            server_default=sa.text("0"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "green_potions",
            sa.INTEGER(),
            server_default=sa.text("0"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "blue_potions",
            sa.INTEGER(),
            server_default=sa.text("0"),
            autoincrement=False,
            nullable=False,
        ),
        sa.CheckConstraint("gold >= 0", name="check_gold_positive"),
        sa.PrimaryKeyConstraint("id", name="global_inventory_pkey"),
    )
    op.create_table(
        "cart_items",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("cart_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("potion_sku", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column("quantity", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["cart_id"], ["carts.id"], name="fk_cart", ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(
            ["potion_sku"], ["potions.sku"], name="fk_potion", ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id", name="cart_items_pkey"),
        sa.UniqueConstraint(
            "cart_id", "potion_sku", name="cart_items_cart_id_potion_sku_key"
        ),
    )
    op.create_table(
        "carts",
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text("nextval('carts_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("customer_name", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column(
            "checked_out",
            sa.BOOLEAN(),
            server_default=sa.text("false"),
            autoincrement=False,
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("id", name="carts_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "account_ledger_entries",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("account_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "account_transaction_id", sa.INTEGER(), autoincrement=False, nullable=True
        ),
        sa.Column("change", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["account_id"],
            ["accounts.id"],
            name="account_ledger_entries_account_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["account_id"],
            ["accounts.id"],
            name="fk_ledger_account",
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["account_transaction_id"],
            ["account_transactions.id"],
            name="account_ledger_entries_account_transaction_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["account_transaction_id"],
            ["account_transactions.id"],
            name="fk_ledger_transaction",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name="account_ledger_entries_pkey"),
    )
    op.create_table(
        "potions",
        sa.Column("sku", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("price", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("quantity", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            "active",
            sa.BOOLEAN(),
            server_default=sa.text("true"),
            autoincrement=False,
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("sku", name="potions_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "ledger_entries",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("type", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("sku", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("quantity", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("order_id", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["sku"], ["potions.sku"], name="fk_ledger_potion", ondelete="SET NULL"
        ),
        sa.PrimaryKeyConstraint("id", name="ledger_entries_pkey"),
    )
    op.create_table(
        "audit_log",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("cart_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("potion_sku", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column("quantity", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            "timestamp",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["cart_id"], ["carts.id"], name="fk_audit_cart", ondelete="SET NULL"
        ),
        sa.ForeignKeyConstraint(
            ["potion_sku"], ["potions.sku"], name="fk_audit_potion", ondelete="SET NULL"
        ),
        sa.PrimaryKeyConstraint("id", name="audit_log_pkey"),
    )
    op.create_table(
        "account_transactions",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("description", sa.TEXT(), autoincrement=False, nullable=True),
        sa.PrimaryKeyConstraint("id", name="account_transactions_pkey"),
    )
    op.create_table(
        "processed_requests",
        sa.Column("order_id", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column(
            "response",
            postgresql.JSONB(astext_type=sa.Text()),
            autoincrement=False,
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("order_id", name="processed_requests_pkey"),
    )
    op.create_table(
        "accounts",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.PrimaryKeyConstraint("id", name="accounts_pkey"),
    )
    op.create_table(
        "potion_catalog",
        sa.Column("sku", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("r", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("g", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("b", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("d", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("price", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            "active",
            sa.BOOLEAN(),
            server_default=sa.text("true"),
            autoincrement=False,
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("sku", name="potion_catalog_pkey"),
    )
    # ### end Alembic commands ###
